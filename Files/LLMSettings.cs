using LetheAISharp.LLM;
using LetheAISharp.SearchAPI;
using HNSW.Net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LetheAISharp.Files
{
    public class LLMSettings : BaseFile
    {

        /// <summary>
        /// Agentic and Brain data will be saved to this folder.
        /// It will use "{BasePersona.UniqueName}" filename with ".brain" and ".agent" extensions.
        /// </summary>
        public string DataPath { get; set; } = "data/chars/";

        #region *** Backend Connection ***

        /// <summary> URL of the backend server (KoboldAPI, OpenAI, etc.) </summary>
        public string BackendUrl { get; set; } = "http://localhost:5001";

        /// <summary> API of the backend server, KoboldAPI (text completion) and OpenAI (chat completion) are both handled </summary>
        public BackendAPI BackendAPI { get; set; } = BackendAPI.KoboldAPI;

        /// <summary> API key for OpenAI (depends on the backend) </summary>
        public string OpenAIKey { get; set; } = "123";

        #endregion

        #region *** Model Settings ***

        /// <summary> Max length for the bot's reply. </summary>
        public int MaxReplyLength { get; set; } = 512;

        /// <summary> Overrides the scenario field of the currently loaded character </summary>
        public string ScenarioOverride { get; set; } = string.Empty;

        /// <summary> Should we stop the generation after the first paragraph? </summary>
        public bool StopGenerationOnFirstParagraph { get; set; } = false;

        /// <summary> Thinking models only, attempt to disable the thinking block </summary>
        public bool DisableThinking { get; set; } = false;

        /// <summary> Allow keyword-activated snippets to be inserted in the prompt (see WorldInfo and BasePersona) </summary>
        public bool AllowWorldInfo { get; set; } = true;

        /// <summary> 
        /// Move all RAG, WorldInfo, and Brain entries to the system prompt independantly of their respective settings. 
        /// Some models perform better with such info in the system prompt, while others prefer it in the main dialog.
        /// </summary>
        public bool MoveAllInsertsToSysPrompt { get; set; } = false;

        #endregion

        #region *** Long term memory system and summaries ***

        /// <summary> 
        /// If set to true, summaries of previous chat sessions will be insereted in the system prompt to provide extended context.
        /// </summary>
        public bool SessionMemorySystem { get; set; } = false;

        /// <summary> Should the chatlog contains only the latest/current chat session or as much dialog as we can fit in? </summary>
        public SessionHandling SessionHandling { get; set; } = SessionHandling.FitAll;

        /// <summary> Reserved token space for summaries of previous sessions </summary>
        public int SessionReservedTokens { get; set; } = 2048;

        /// <summary>
        /// For long chat sessions, cut the summary in the middle instead of at the end for summary purpose. Both approaches have pros and cons.
        /// </summary>
        public bool CutInTheMiddleSummaryStrategy = false;

        /// <summary>
        /// Format the memory entries generated by the Brain and Task to be inserted in a format that reduces hallucination.
        /// </summary>
        public bool AntiHallucinationMemoryFormat { get; set; } = true;


        #endregion

        #region *** Sentiment Analysis Module ***

        public bool SentimentEnabled { get; set; } = true;
        public string SentimentModelPath { get; set; } = "data/classifiers/emotion-bert-classifier.gguf";
        public string SentimentGoEmotionHeadPath { get; set; } = "data/classifiers/goemotions_head.json";
        public string SentimentThresholdsPath { get; set; } = "data/classifiers/optimized_thresholds.json";

        #endregion

        #region *** RAG Settings (retrieval of past information based on text embedding similarity) ***

        /// <summary> Toggle RAG functionalities on/off </summary>
        public bool RAGEnabled { get; set; } = true;

        /// <summary> 
        /// Path to embeddding model. RAG functionalities won't be available if this file is not present. 
        /// The model must be in the GGUF format. Default can be downloaded here:
        /// https://huggingface.co/ChristianAzinn/gte-large-gguf
        /// </summary>
        public string RAGModelPath { get; set; } = "data/classifiers/gte-large.Q6_K.gguf";

        /// <summary> 
        /// Thinking models only, will move all RAG and WI to the thinking block. This is highly experimental. 
        /// </summary>
        public bool RAGMoveToThinkBlock { get; set; } = false;

        /// <summary>
        /// Converts user sentences to 3rd person when performing RAG searches. English Only.
        /// This usually improves the relevance of the retrieved entries, especially chat sessions.
        /// </summary>
        public bool RAGConvertTo3rdPerson { get; set; } = true;

        /// <summary> Maximum number of entries to be retrieved with RAG </summary>
        public int RAGMaxEntries { get; set; } = 3;

        /// <summary> Index at which RAG entries will be inserted in the chatlog. -1 to insert in system prompt. </summary>
        public int RAGIndex { get; set; } = 3;

        /// <summary> Embedding size (depends on the embedding model) </summary>
        public int RAGEmbeddingSize { get; set; } = 1024;

        /// <summary> M Value for the Vector Search (SmallWorld / HNSW.NET implementation) </summary>
        public int RAGMValue { get; set; } = 15;

        /// <summary> Max distance for an entry to be retrieved (SmallWorld / HNSW.NET implementation) </summary>
        public float RAGDistanceCutOff { get; set; } = 0.1f;

        /// <summary> Search method. Simple is the most accurate method (but is very slightly slower). </summary>
        public RAGSelectionHeuristic RAGHeuristic { get; set; } = RAGSelectionHeuristic.SelectSimple;

        #endregion

        #region *** WebSearch API Settings ***

        /// <summary>
        /// 2 API are available:
        /// - Brave API (requires manual registration, and an API key on their website). Provides detailed search results.
        /// - DuckDuckGo: no registration required, free to use. Behaves differently depending on Backend: On OpenAI API, it'll provides only basic AI generated summary for the query. On KoboldAPI, if KoboldCpp is configured correctly, it'll provides very detailed search results.
        /// </summary>
        public BackendSearchAPI WebSearchAPI { get; set; } = BackendSearchAPI.DuckDuckGo;

        /// <summary> If using the Brave API, you API key should go there </summary>
        public string WebSearchBraveAPIKey { get; set; } = string.Empty;

        /// <summary> Attempt to scrape the most relevant search results for their full content. </summary>
        public bool WebSearchDetailedResults { get; set; } = true;

        #endregion

    }
}
